plugins {
  id 'maven-publish'
  id 'net.neoforged.gradle.userdev' version '7.0.116'
  id 'com.matthewprenger.cursegradle' version '1.4.0'
  id 'nu.studer.credentials' version '3.0'
  id "com.modrinth.minotaur" version "2.+"
}

base {
  archivesName = "${mod_id}-neoforge-${minecraft_version}"
}

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
  minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
  configureEach {
    systemProperty 'forge.logging.markers', 'REGISTRIES'
    systemProperty 'forge.logging.console.level', 'debug'
    modSource project.sourceSets.main
  }

  client {
    systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
  }

  server {
    systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    programArgument '--nogui'
  }

  gameTestServer {
    systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
  }

  data {
    programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
  }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
  implementation "net.neoforged:neoforge:${project.neoforge_version}"
  compileOnly project(":Common")
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
  source(project(":Common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
  source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
  from(project(":Common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
  from project(":Common").sourceSets.main.resources
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId base.archivesName.get()
      from components.java
    }
  }
  repositories {
    maven {
      url "file://" + System.getenv("local_maven")
    }
  }
}

curseforge {
  apiKey = "${credentials.forKey('curseforge_api_token')}"
  project {
    id = "${project.curseforge_project_id}"
    changelog = rootProject.file("CHANGELOG.md")
    changelogType = 'markdown'
    releaseType = "${project.curseforge_release_type}"
    addGameVersion("${project.minecraft_version}")
    addGameVersion("NeoForge")
    mainArtifact(jar) {
      relations {
        optionalDependency 'armourers-workshop'
      }
    }
  }
}

modrinth {
  token = "${credentials.forKey('modrinth_api_token')}"
  projectId = "${project.modrinth_project_id}"
  versionNumber = "${project.version}"
  versionType = "${project.modrinth_release_type}"
  versionName = "${project.mod_name} ${project.version}"
  changelog = rootProject.file("CHANGELOG.md").text
  uploadFile = jar
  gameVersions = ["${project.minecraft_version}"]
  loaders = ["neoforge"]
  dependencies {
    optional.project "armourers-workshop"
  }
}
