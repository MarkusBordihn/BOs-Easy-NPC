plugins {
  id 'maven-publish'
  id 'net.minecraftforge.gradle' version '6.+'
  id 'com.matthewprenger.cursegradle' version '1.4.0'
  id 'nu.studer.credentials' version '3.0'
  id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'net.minecraftforge.gradle'

archivesBaseName = "${mod_id}-forge-${minecraft_version}"

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
  mappings channel: 'official', version: "${project.minecraft_version}"
  // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  // Default run configurations.
  runs {
    client {
      workingDirectory project.file('run/client')
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', "${project.mod_id}"

      mods {
        easy_npc {
          source sourceSets.main
        }
      }

      // Mixin Support
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    client2 {
      parent minecraft.runs.client
      workingDirectory project.file('run/client2')
      args '--username', 'guest_player'
    }

    server {
      workingDirectory project.file('run/server')
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', "${project.mod_id}"

      mods {
        easy_npc {
          source sourceSets.main
        }
      }

      // Mixin Support
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    gameTestServer {
      jvmArgs "-XX:+AllowEnhancedClassRedefinition"
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', "${project.mod_id}"

      mods {
        examplemod {
          source sourceSets.main
        }
      }

      // Mixin Support
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    data {
      workingDirectory project.file('run/data')
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', "${project.mod_id}"

      args '--mod', "${project.mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
      mods {
        easy_npc {
          source sourceSets.main
        }
      }
    }
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
  minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

  // Include Common code
  compileOnly project(":Common")

  // Integration test dependencies
  if (test_integration_mod && project.armourers_workshop_mod) {
    runtimeOnly fg.deobf("curse.maven:armourers-workshop-229523:${project.armourers_workshop_mod}")
  }
  if (test_integration_mod && project.epic_fight_mod && !project.better_combat_mod) {
    runtimeOnly fg.deobf("curse.maven:epic_fight-405076:${project.epic_fight_mod}")
  }
  if (test_integration_mod && project.create_mod) {
    runtimeOnly fg.deobf("curse.maven:create-328085:${project.create_mod}")
  }
  if (test_integration_mod && project.mrcrayfishs_gun_mod && project.framework_mod) {
    runtimeOnly fg.deobf("curse.maven:mrcrayfishs-gun-289479:${project.mrcrayfishs_gun_mod}")
    runtimeOnly fg.deobf("curse.maven:framework-549225:${project.framework_mod}")
  }
  if (test_integration_mod && project.project_mmo_mod) {
    runtimeOnly fg.deobf("curse.maven:project-mmo-353935:${project.project_mmo_mod}")
  }
  if (test_integration_mod && project.better_combat_mod && project.cloth_config_mod && project.player_animator_mod) {
    runtimeOnly fg.deobf("curse.maven:better-combat-639842:${project.better_combat_mod}")
  }
  if (test_integration_mod && project.cloth_config_mod) {
    runtimeOnly fg.deobf("curse.maven:cloth-config-348521:${project.cloth_config_mod}")
  }
  if (test_integration_mod && project.player_animator_mod) {
    runtimeOnly fg.deobf("curse.maven:player-animator-658587:${project.player_animator_mod}")
  }
  if (test_integration_mod && project.spartan_weaponry_mod) {
    runtimeOnly fg.deobf("curse.maven:spartan-weaponry-278141:${project.spartan_weaponry_mod}")
  }
  if (test_integration_mod && project.immersive_melodies_mod) {
    runtimeOnly fg.deobf("curse.maven:immersive-melodies-904471:${project.immersive_melodies_mod}")
  }

  // Additional helpful Mods for development (runtime dependency)
  runtimeOnly fg.deobf("curse.maven:xaeros_minimap-263420:${project.xaeros_minimap_mod}")
  runtimeOnly fg.deobf("curse.maven:spark-361579:${project.spark_mod}")
  runtimeOnly fg.deobf("curse.maven:jei-238222:${project.jei_mod}")
}

tasks.withType(JavaCompile).configureEach {
  source(project(":Common").sourceSets.main.allSource)
}

processResources {
  from project(":Common").sourceSets.main.resources
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
  manifest {
    attributes([
        "Specification-Title"     : "${project.mod_name}",
        "Specification-Vendor"    : "${project.vendor_name}",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : "${project.version}",
        "Implementation-Vendor"   : "${project.mod_id}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
    }
  }
}

curseforge {
  apiKey = "${credentials.forKey('curseforge_api_token')}"
  project {
    id = "${project.curseforge_project_id}"
    changelog = rootProject.file("CHANGELOG.md")
    changelogType = 'markdown'
    releaseType = "${project.curseforge_release_type}"
    addGameVersion("${project.minecraft_version}")
    addGameVersion("Forge")
    mainArtifact(jar) {
      relations {
        optionalDependency 'easy-npc-epic-fight'
        optionalDependency 'armourers-workshop'
        optionalDependency 'simple-quests-forge'
      }
    }
  }
}

modrinth {
  token = "${credentials.forKey('modrinth_api_token')}"
  projectId = "${project.modrinth_project_id}"
  versionNumber = "${project.version}"
  versionType = "${project.modrinth_release_type}"
  versionName = "${project.mod_name} ${project.version}"
  changelog = rootProject.file("CHANGELOG.md").text
  uploadFile = jar
  gameVersions = ["${project.minecraft_version}"]
  loaders = ["forge"]
  dependencies {
    optional.project "easy-npc-epic-fight"
    optional.project "armourers-workshop"
    optional.project "simple-quests"
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// Merge the resources and classes into the same directory.
// This is done because java expects modules to be in a single directory.
// And if we have it in multiple we have to do performance intensive hacks like having the UnionFileSystem
// This will eventually be migrated to ForgeGradle so modders don't need to manually do it. But that is later.
sourceSets.each {
  def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
  it.output.resourcesDir = dir
  it.java.destinationDirectory = dir
}
